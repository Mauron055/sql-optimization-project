Задача 1
1. Запрос работает медленно, так как в колонку order_id вставляется подзапрос с использованием агрегирующей функции.
Также присутствуют лишние индексы
2. Чтобы ускорить запрос, необходимо изменить тип колонки order_id с bigint на SEQUENCE
Также нужно убрать лишние индексы
3. Реализация плана выглядит так:

SELECT MAX(order_id) FROM orders;
CREATE SEQUENCE orders_order_id_seq START WITH 27684;
ALTER TABLE orders ALTER COLUMN order_id SET DEFAULT nextval('orders_order_id_seq');
-- Удаляем лишние индексы
DROP INDEX IF EXISTS orders_device_type_idx;
DROP INDEX IF EXISTS orders_discount_idx;
DROP INDEX IF EXISTS orders_final_cost_idx;
DROP INDEX IF EXISTS orders_total_final_cost_discount_idx;

Задача 2
1. Использование текстовых столбцов для user_id и birth_date замедляет выполнение запроса
2. Чтобы ускорить запрос, для birth_date и user_id лучше использовать более подходящие типы данных. Индексы на столбцы city_id и birth_date могут существенно ускорить выполнение запроса.
3. Запросы для реализации:

-- Приведение столбцов к нужным типам
ALTER TABLE users
    ALTER COLUMN user_id TYPE uuid USING user_id::uuid,
    ALTER COLUMN birth_date TYPE date USING to_date(birth_date::text, 'yyyy-mm-dd'::text);
    -- Приведение остальных столбцов к нужным типам
    ALTER COLUMN first_name TYPE VARCHAR(255),
    ALTER COLUMN last_name TYPE VARCHAR(255),
    ALTER COLUMN city_id TYPE INTEGER,
    ALTER COLUMN gender TYPE CHAR(1); -- Предполагая, что gender может быть 'M' или 'F'

-- Индекс на city_id и birth_date
CREATE INDEX idx_city_birthdate ON users (city_id, birth_date);

Задача 3
1. В процедуре add_payment мы обновляем таблицу order_statuses, добавляем данные в таблицы payments и sales
2. мы можем обойтись меньшим количеством таблиц. Например, если мы избавимся от лишней таблицы order_statuses и
будем хранить статусы заказов внутри таблицы orders, мы сможем избежать одной лишней операции в
процедуре add_payment, что может ускорить её работу
3. Запросы для реализации:
ALTER TABLE orders
ADD COLUMN status_id integer;

CREATE INDEX idx_orders_order_id ON orders (order_id);
CREATE INDEX idx_orders_status_id ON orders (status_id);

Задача 4
Чтобы ускорить таблицу userlogs, нужно разделить её на партиции
CREATE TABLE user_logs_q1 PARTITION OF user_logs
FOR VALUES FROM ('2023-01-01') TO ('2023-04-01');

CREATE TABLE user_logs_q2 PARTITION OF user_logs
FOR VALUES FROM ('2023-04-01') TO ('2023-07-01');

CREATE TABLE user_logs_q3 PARTITION OF user_logs
FOR VALUES FROM ('2023-07-01') TO ('2023-10-01');

CREATE TABLE user_logs_q4 PARTITION OF user_logs
FOR VALUES FROM ('2023-10-01') TO ('2024-01-01');
Заполнять данными эти партиции можно как обычную таблицу user_logs, далее эти данные будут автоматически направлены
в соответствующую партицию.

Задача 5
Добавим информацию о наличии признаков в заказах в таблицу orders
ALTER TABLE orders
ADD COLUMN spicy_order boolean,
ADD COLUMN fish_order boolean,
ADD COLUMN meat_order boolean;

После того как данные о признаках будут добавлены в таблицу orders,
мы сможем создать материализованное представление, используя информацию об
этих признаках для агрегации результатов.
CREATE MATERIALIZED VIEW age_group_orders_info AS
SELECT
    CASE
        WHEN EXTRACT(YEAR FROM age(to_date(birth_date, 'YYYY-MM-DD'))) BETWEEN 0 AND 20 THEN '0-20'
        WHEN EXTRACT(YEAR FROM age(to_date(birth_date, 'YYYY-MM-DD'))) BETWEEN 20 AND 30 THEN '20-30'
        WHEN EXTRACT(YEAR FROM age(to_date(birth_date, 'YYYY-MM-DD'))) BETWEEN 30 AND 40 THEN '30-40'
        WHEN EXTRACT(YEAR FROM age(to_date(birth_date, 'YYYY-MM-DD'))) BETWEEN 40 AND 100 THEN '40-100'
        ELSE 'Unknown'
    END AS age_group,
    AVG(CASE WHEN spicy_order THEN 1 ELSE 0 END) AS spicy,
    AVG(CASE WHEN fish_order THEN 1 ELSE 0 END) AS fish,
    AVG(CASE WHEN meat_order THEN 1 ELSE 0 END) AS meat
FROM orders
JOIN users ON orders.user_id = users.user_id::uuid
WHERE order_dt < current_date
GROUP BY age_group;


Чтобы найти медленные запросы нужно:
Узнать oid базы данных
SELECT oid, datname FROM pg_database;
oid = 20412
Далее выполняем следующий запрос для поиска самых медленных запросов:
SELECT query, 
    calls,
    total_exec_time,
    min_exec_time, 
    max_exec_time, 
    mean_exec_time,
    rows
FROM pg_stat_statements 
WHERE dbid = 20412 ORDER BY total_exec_time DESC;
Этот запрос показал, что 5 этих запросов будут под номерами 9, 7, 8, 2, 15
Запрос 9:
В  текущем запросе у нас внутри основного запроса есть подзапрос,
который делает подсчет строк по критериям order_id и status_id.
Вместо использования подзапроса в этом контексте, лучше воспользоваться оператором EXISTS
Исправленный запрос:
SELECT count(*)
FROM order_statuses os
    JOIN orders o ON o.order_id = os.order_id
WHERE NOT EXISTS (
    SELECT 1
    FROM order_statuses os1
    WHERE os1.order_id = o.order_id AND os1.status_id = 2
)
AND o.city_id = 1;
Запрос 7:
Для оптимизации данного запроса одним из решений может быть создание индекса на поле visitor_uuid,
так как это поле используется в условии фильтрации.
CREATE INDEX ON user_logs(visitor_uuid);
Запрос 8:
SELECT visitor_uuid, user_id, event, datetime, log_date, log_id
FROM user_logs
WHERE datetime = current_date;
Здесь мы убрали лишнюю конвертацию datetime в тип date и указали все поля явно
Запрос 2:
SELECT
    o.order_id,
    o.order_dt,
    o.final_cost,
    s.status_name
FROM
    orders o
    JOIN order_statuses os ON o.order_id = os.order_id
    JOIN statuses s ON os.status_id = s.status_id
    JOIN (
        SELECT
            order_id,
            max(status_dt) AS max_status_dt
        FROM
            order_statuses
        GROUP BY order_id
    ) max_statuses ON os.order_id = max_statuses.order_id
                  AND os.status_dt = max_statuses.max_status_dt
WHERE
    o.user_id = 'c2885b45-dddd-4df3-b9b3-2cc012df727c'::uuid;
Вместо подзапроса используется JOIN с предварительно отфильтрованной таблицей max_statuses,
содержащей максимальную дату статуса для каждого заказа.
Запрос 15:
WITH total_dish_sales AS (
  SELECT
    oi.item AS dish_id,
    SUM(oi.count) AS total_sales
  FROM order_items oi
  GROUP BY oi.item
)

SELECT
  d.name,
  SUM(oi.count) AS orders_quantity
FROM order_items oi
JOIN dishes d ON d.object_id = oi.item
JOIN total_dish_sales tds ON tds.dish_id = oi.item
WHERE tds.total_sales > (SELECT SUM(total_sales) / COUNT(*) FROM total_dish_sales)
GROUP BY d.name
ORDER BY orders_quantity DESC;
Использование CTE позволило нам избавиться от множества лишних вложенных запросов.
